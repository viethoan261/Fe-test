#!/usr/bin/env groovy

pipeline {

  agent any

  options { skipDefaultCheckout() }

  environment {
    DOCKER_IMAGE = "evo-web-app"
    SERVICE_NAME = "evo-web-app"
    NETWORK = "evo-order-meet"
  }
  stages {
    stage('checkout') {
      steps {
        checkout scm
      }
    }

    stage('check node and npm') {
      steps {
        sh "node -v"
        sh "npm -v"
      }
    }

    stage('npm install') {
      steps {
        //sh "npm install"
        sh "npm install --save --legacy-peer-deps"
      }
    }

    stage('packaging') {
      steps {
        sh "npm run build:qa"
      }
    }

    stage('build') {
      steps {
        sh "docker build -t ${DOCKER_IMAGE}:latest . "
        sh "docker image ls | grep ${DOCKER_IMAGE}"

        //clean to save disk
        sh "docker image prune -f"
      }
    }

    stage('deploy') {
      steps {
        sh "docker stop ${SERVICE_NAME} || true && docker rm -f ${SERVICE_NAME} || true"
        sh "docker run -p 8800:80 --name ${SERVICE_NAME} --network ${NETWORK} ${DOCKER_IMAGE}:latest"
      }
    }
  }
}
